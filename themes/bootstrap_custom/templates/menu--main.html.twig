{#
/**
 * @file
 * Default theme implementation to display a menu.
 *
 * Available variables:
 * - menu_name: The machine name of the menu.
 * - items: A nested list of menu items. Each menu item contains:
 *   - attributes: HTML attributes for the menu item.
 *   - below: The menu item child items.
 *   - title: The menu link title.
 *   - url: The menu link url, instance of \Drupal\Core\Url
 *   - localized_options: Menu link localized options.
 *
 * @ingroup templates
 */
#}
{% import _self as menus %}

{#
  We call a macro which calls itself to render the full tree.
  @see http://twig.sensiolabs.org/doc/tags/macro.html
#}
{{ menus.menu_links(items, attributes, 0) }}

{% macro menu_links(items, attributes, menu_level) %}
  {% import _self as menus %}
  <div{{ attributes.addClass('nav-custom') }} id="menu">
    {% for item in items %}
      {% set item_classes = [
          'navbar-text',
        ]
      %}
      {# <a>{{ item.is_expanded }}</a> #}
      {% if menu_level == 0 and item.is_expanded %}
          <a href='#' class="navbar-text dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" role="button">{{ item.title }}</a>
          <div class="dropdown-menu">
            <li class="dropdown">
              {% for submenu in item.below %}
              <a href="{{ submenu.url }}" class="dropdown-item custom-dropdown-item">{{ submenu.title }}</a>
  {#           {{ menus.menu_links(item.below, attributes.removeClass('nav', 'navbar-nav'), menu_level + 1) }} #}
              {% endfor %}
            </li>

          </div>
      {% else %} 
        <a href="{{ item.url }}" class="navbar-text">{{ item.title }}</a>
      {% endif %}
{#       {% if item.below %}
        {{ menus.menu_links(item.below, attributes.removeClass('nav', 'navbar-nav'), menu_level + 1) }}
      {% endif %} #}
    {% endfor %}  
  </div>
{#   {% raw %}
  <script type="text/javascript">
    const $dd = $(".dropdown");
    const $dropdownToggle = $(".dropdown-toggle");
    const $dropdownMenu = $(".dropdown-menu");
    const showClass = "show";

    $(window).on("load resize", function() {
      if (this.matchMedia("(min-width: 768px)").matches) {
        $dd.hover(
          function() {
            const $this = $(this);
            $this.addClass(showClass);
            $this.find($dropdownToggle).attr("aria-expanded", "true");
            $this.find($dropdownMenu).addClass(showClass);
          },
          function() {
            const $this = $(this);
            $this.removeClass(showClass);
            $this.find($dropdownToggle).attr("aria-expanded", "false");
            $this.find($dropdownMenu).removeClass(showClass);
          }
        );
      } else {
        $dd.off("mouseenter mouseleave");
      }
    });
  </script>
{% endraw %} #}
{#   {% import _self as menus %}
  {% if items %}
    {% if menu_level == 0 %}
      <div{{ attributes.addClass('nav-custom') }}>
    {% else %}
      <div{{ attributes.addClass('dropdown-menu') }}>
    {% endif %}
    {% for item in items %}
      {%
        set item_classes = [
          'navbar-text',
          'nav-link'
        ]
      %}
      {% if menu_level == 0 and item.is_expanded %}
        <a href="{{ item.url }}" class="dropdown-toggle" data-target="#" data-toggle="dropdown">{{ item.title }} <span class="caret"></span></a>
      {% else %}
        {{ link(item.title, item.url) }}
      {% endif %}
      {% if item.below %}
        {{ menus.menu_links(item.below, attributes.removeClass('nav', 'navbar-nav'), menu_level + 1) }}
      {% endif %}
      </div>
    {% endfor %}
    </div>
  {% endif %} #}
{% endmacro %}
